package hr.fer.zemris.trisat;

import java.util.Iterator;

public class BitVectorNGenerator implements Iterable<MutableBitVector>{
	
	private BitVector assignment;
	private int size;
	
	public BitVectorNGenerator(BitVector assignment) {
		this.assignment = assignment.copy();
		size = assignment.getSize();
	}
	
	public Iterator<MutableBitVector> iterator() {
		Iterator<MutableBitVector> iterator = new Iterator<MutableBitVector>() {
			
			private int currentIndex = 0;
			
			public boolean hasNext() {
				if(currentIndex < size) {
					return true;
				}
				return false;
			}

			public MutableBitVector next() {
				boolean newValue = !assignment.get(currentIndex);
				MutableBitVector temp = assignment.copy();
				temp.set(currentIndex, newValue);
				currentIndex++;
				return temp;
			}
		};
		return iterator;
	}
	
	public BitVector[] createNeighborhood() {
		BitVector[] neighborhood = new BitVector[size];
		for(int i = 0; i < size; i++) {
			boolean newValue = !assignment.get(i);
			MutableBitVector temp = assignment.copy();
			temp.set(i, newValue);
			neighborhood[i] = temp;
		}
		return neighborhood;
	}
	
}
